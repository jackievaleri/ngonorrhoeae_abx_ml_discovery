Command line
python sklearn_train.py --num_bits 4096 --radius 2 --class_weight balanced --save_dir ../melis_gonorrhea/models/svm_final_15/ --data_path ../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv --num_folds 30 --dataset_type classification --features_path ../melis_gonorrhea/data/FULL_03_19_2022.npz --no_features_scaling --split_type scaffold_balanced --split_sizes 0.8 0.1 0.1 --smiles_columns SMILES --target_columns hit --model_type svm --metric prc-auc --extra_metrics auc
Args
{'activation': 'ReLU',
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'atom_descriptor_scaling': True,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_descriptors_size': 0,
 'atom_features_size': 0,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_feature_scaling': True,
 'bond_features_path': None,
 'bond_features_size': 0,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_weight': 'balanced',
 'config_path': None,
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'crossval_index_sets': None,
 'cuda': False,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'device': device(type='cpu'),
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epochs': 30,
 'explicit_h': False,
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'features_scaling': False,
 'features_size': None,
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'freeze_first_only': False,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'metrics': ['prc-auc', 'auc'],
 'minimize_score': False,
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_lrs': 1,
 'num_tasks': 1,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 0,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'task_names': ['hit'],
 'test': False,
 'test_fold_index': None,
 'train_data_size': None,
 'undirected': False,
 'use_input_features': True,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Command line
python sklearn_train.py --num_bits 4096 --radius 2 --class_weight balanced --save_dir ../melis_gonorrhea/models/svm_final_15/ --data_path ../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv --num_folds 30 --dataset_type classification --features_path ../melis_gonorrhea/data/FULL_03_19_2022.npz --no_features_scaling --split_type scaffold_balanced --split_sizes 0.8 0.1 0.1 --smiles_columns SMILES --target_columns hit --model_type svm --metric prc-auc --extra_metrics auc
Args
{'activation': 'ReLU',
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'atom_descriptor_scaling': True,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_descriptors_size': 0,
 'atom_features_size': 0,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_feature_scaling': True,
 'bond_features_path': None,
 'bond_features_size': 0,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_weight': 'balanced',
 'config_path': None,
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'crossval_index_sets': None,
 'cuda': False,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'device': device(type='cpu'),
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epochs': 30,
 'explicit_h': False,
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'features_scaling': False,
 'features_size': None,
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'freeze_first_only': False,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'metrics': ['prc-auc', 'auc'],
 'minimize_score': False,
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_lrs': 1,
 'num_tasks': 1,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 0,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'task_names': ['hit'],
 'test': False,
 'test_fold_index': None,
 'train_data_size': None,
 'undirected': False,
 'use_input_features': True,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Number of tasks = 1
Fold 0
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_0',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 0,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 0
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.37630343309390324
Test auc = 0.7352529058313633
Fold 1
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_1',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 1,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 1
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.5631741007524319
Test auc = 0.8618594744971944
Fold 2
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_2',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 2,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 2
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.4883198345750051
Test auc = 0.8881423226693136
Fold 3
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_3',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 3,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 3
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.46694447288492635
Test auc = 0.8732222425685161
Fold 4
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_4',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 4,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 4
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.42430415103652935
Test auc = 0.8353297574030946
Fold 5
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_5',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 5,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 5
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.42332645605138336
Test auc = 0.8239402416754089
Fold 6
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_6',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 6,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 6
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.34727610936997466
Test auc = 0.7797877345472801
Fold 7
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_7',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 7,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 7
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.4944021115959864
Test auc = 0.9067220935676955
Fold 8
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_8',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 8,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 8
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.3699647019840309
Test auc = 0.8871234143763214
Fold 9
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_9',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 9,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 9
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.45158383337787356
Test auc = 0.8801008192205304
Fold 10
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_10',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 10,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 10
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.4318098291923323
Test auc = 0.8647149004841312
Fold 11
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_11',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 11,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 11
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.4355954620848559
Test auc = 0.8480137946824647
Fold 12
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_12',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 12,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 12
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.3729540992716446
Test auc = 0.8711828135803874
Fold 13
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_13',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 13,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 13
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.43892784110297833
Test auc = 0.8617553837495187
Fold 14
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_14',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 14,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 14
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.2489878381486391
Test auc = 0.8279568231475714
Fold 15
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_15',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 15,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 15
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.5346920772554106
Test auc = 0.8943229924437978
Fold 16
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_16',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 16,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 16
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.47441683800364337
Test auc = 0.8425060112209458
Fold 17
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_17',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 17,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 17
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.27559370278681655
Test auc = 0.7975553020950921
Fold 18
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_18',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 18,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 18
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.26835991852945373
Test auc = 0.7929393534597916
Fold 19
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_19',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 19,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 19
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.4948752272621261
Test auc = 0.8151797603195738
Fold 20
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_20',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 20,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 20
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.4899796497613552
Test auc = 0.9003816981875493
Fold 21
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_21',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 21,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 21
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.523207729440654
Test auc = 0.89343437461415
Fold 22
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_22',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 22,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 22
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.29297890412295385
Test auc = 0.8103789843074776
Fold 23
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_23',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 23,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 23
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.5507105508139296
Test auc = 0.8806402488482252
Fold 24
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_24',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 24,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 24
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.4450166288463421
Test auc = 0.8400801704891414
Fold 25
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_25',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 25,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 25
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.3894523008970755
Test auc = 0.8372852614108169
Fold 26
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_26',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 26,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 26
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.4293091068198707
Test auc = 0.8205802859096682
Fold 27
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_27',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 27,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 27
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.38774511139498025
Test auc = 0.8413926365708404
Fold 28
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_28',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 28,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 28
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.39819391171341295
Test auc = 0.8268211338049597
Fold 29
{'_action_groups': [<argparse._ArgumentGroup object at 0x7fc3aafb9340>,
                    <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>],
 '_actions': [_StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
              _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
              _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
              _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
              _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
              _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
              _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
              _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
              _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
              _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
              _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
              _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
              _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
              _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
              _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
              _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
              _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
              _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
              _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
              _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
              _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
              _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
              _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
              _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
              _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
              _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
              _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
              _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
              _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
              _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
              _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
              _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
              _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
              _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
              _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
              _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
              _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
              _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
              _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
              _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
              _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
              _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
              _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
              _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
              _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
              _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
              _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
              _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
              _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
              _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
              _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
              _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
              _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
              _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
              _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
              _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
              _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
              _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
              _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
              _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
              _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
              _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
              _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
              _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
              _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
              _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
              _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
              _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
              _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
              _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
              _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
              _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
              _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
              _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
              _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
              _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
              _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
              _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
              _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
              _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
              _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
              _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
              _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)],
 '_annotations': {'activation': typing.Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'],
                  'aggregation': typing.Literal['mean', 'sum', 'norm'],
                  'aggregation_norm': <class 'int'>,
                  'atom_descriptors': typing.Literal['feature', 'descriptor'],
                  'atom_descriptors_path': <class 'str'>,
                  'atom_messages': <class 'bool'>,
                  'batch_size': <class 'int'>,
                  'bias': <class 'bool'>,
                  'bond_features_path': <class 'str'>,
                  'cache_cutoff': <class 'float'>,
                  'checkpoint_dir': <class 'str'>,
                  'checkpoint_frzn': <class 'str'>,
                  'checkpoint_path': <class 'str'>,
                  'checkpoint_paths': typing.List[str],
                  'class_balance': <class 'bool'>,
                  'class_weight': typing.Literal['balanced'],
                  'config_path': <class 'str'>,
                  'crossval_index_dir': <class 'str'>,
                  'crossval_index_file': <class 'str'>,
                  'data_path': <class 'str'>,
                  'data_weights_path': <class 'str'>,
                  'dataset_type': typing.Literal['regression', 'classification', 'multiclass'],
                  'depth': <class 'int'>,
                  'dropout': <class 'float'>,
                  'empty_cache': <class 'bool'>,
                  'ensemble_size': <class 'int'>,
                  'epochs': <class 'int'>,
                  'explicit_h': <class 'bool'>,
                  'extra_metrics': typing.List[typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']],
                  'features_generator': typing.List[str],
                  'features_only': <class 'bool'>,
                  'features_path': typing.List[str],
                  'ffn_hidden_size': <class 'int'>,
                  'ffn_num_layers': <class 'int'>,
                  'final_lr': <class 'float'>,
                  'folds_file': <class 'str'>,
                  'freeze_first_only': <class 'bool'>,
                  'frzn_ffn_layers': <class 'int'>,
                  'gpu': <class 'int'>,
                  'grad_clip': <class 'float'>,
                  'hidden_size': <class 'int'>,
                  'ignore_columns': typing.List[str],
                  'init_lr': <class 'float'>,
                  'log_frequency': <class 'int'>,
                  'max_data_size': <class 'int'>,
                  'max_lr': <class 'float'>,
                  'metric': typing.Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'],
                  'model_type': typing.Literal['random_forest', 'svm'],
                  'mpn_shared': <class 'bool'>,
                  'multiclass_num_classes': <class 'int'>,
                  'no_atom_descriptor_scaling': <class 'bool'>,
                  'no_bond_features_scaling': <class 'bool'>,
                  'no_cache_mol': <class 'bool'>,
                  'no_cuda': <class 'bool'>,
                  'no_features_scaling': <class 'bool'>,
                  'num_bits': <class 'int'>,
                  'num_folds': <class 'int'>,
                  'num_trees': <class 'int'>,
                  'num_workers': <class 'int'>,
                  'number_of_molecules': <class 'int'>,
                  'overwrite_default_atom_features': <class 'bool'>,
                  'overwrite_default_bond_features': <class 'bool'>,
                  'pytorch_seed': <class 'int'>,
                  'quiet': <class 'bool'>,
                  'radius': <class 'int'>,
                  'reaction': <class 'bool'>,
                  'reaction_mode': typing.Literal['reac_prod', 'reac_diff', 'prod_diff'],
                  'resume_experiment': <class 'bool'>,
                  'save_dir': <class 'str'>,
                  'save_preds': <class 'bool'>,
                  'save_smiles_splits': <class 'bool'>,
                  'seed': <class 'int'>,
                  'separate_test_atom_descriptors_path': <class 'str'>,
                  'separate_test_bond_features_path': <class 'str'>,
                  'separate_test_features_path': typing.List[str],
                  'separate_test_path': <class 'str'>,
                  'separate_val_atom_descriptors_path': <class 'str'>,
                  'separate_val_bond_features_path': <class 'str'>,
                  'separate_val_features_path': typing.List[str],
                  'separate_val_path': <class 'str'>,
                  'show_individual_scores': <class 'bool'>,
                  'single_task': <class 'bool'>,
                  'smiles_columns': typing.List[str],
                  'split_sizes': typing.Tuple[float, float, float],
                  'split_type': typing.Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'],
                  'target_columns': typing.List[str],
                  'target_weights': typing.List[float],
                  'test': <class 'bool'>,
                  'test_fold_index': <class 'int'>,
                  'undirected': <class 'bool'>,
                  'val_fold_index': <class 'int'>,
                  'warmup_epochs': <class 'float'>},
 '_atom_descriptors_size': 0,
 '_atom_features_size': 0,
 '_bond_features_size': 0,
 '_crossval_index_sets': None,
 '_defaults': {},
 '_explicit_bool': False,
 '_features_size': 200,
 '_has_negative_number_optionals': [],
 '_initialized': True,
 '_mutually_exclusive_groups': [],
 '_negative_number_matcher': re.compile('^-\\d+$|^-\\d*\\.\\d+$'),
 '_num_tasks': None,
 '_option_string_actions': {'--activation': _StoreAction(option_strings=['--activation'], dest='activation', nargs=None, const=None, default='ReLU', type=<function get_literals.<locals>.var_type at 0x7fc2116bb430>, choices=['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], help="(Literal['ReLU', 'LeakyReLU', 'PReLU', 'tanh', 'SELU', 'ELU'], default=ReLU) Activation function.", metavar=None),
                            '--aggregation': _StoreAction(option_strings=['--aggregation'], dest='aggregation', nargs=None, const=None, default='mean', type=<function get_literals.<locals>.var_type at 0x7fc2116bb8b0>, choices=['mean', 'sum', 'norm'], help="(Literal['mean', 'sum', 'norm'], default=mean) Aggregation scheme for atomic vectors into molecular vectors", metavar=None),
                            '--aggregation_norm': _StoreAction(option_strings=['--aggregation_norm'], dest='aggregation_norm', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, help='(int, default=100) For norm aggregation, number by which to divide summed up atomic features', metavar=None),
                            '--atom_descriptors': _StoreAction(option_strings=['--atom_descriptors'], dest='atom_descriptors', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bbca0>, choices=['feature', 'descriptor'], help="(Literal['feature', 'descriptor'], default=None) Custom extra atom descriptors.\n    :code:`feature`: used as atom features to featurize a given molecule.\n    :code:`descriptor`: used as descriptor and concatenated to the machine learned atomic representation.", metavar=None),
                            '--atom_descriptors_path': _StoreAction(option_strings=['--atom_descriptors_path'], dest='atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra atom descriptors.', metavar=None),
                            '--atom_messages': _StoreTrueAction(option_strings=['--atom_messages'], dest='atom_messages', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Centers messages on atoms instead of on bonds.', metavar=None),
                            '--batch_size': _StoreAction(option_strings=['--batch_size'], dest='batch_size', nargs=None, const=None, default=50, type=<class 'int'>, choices=None, help='(int, default=50) Batch size.', metavar=None),
                            '--bias': _StoreTrueAction(option_strings=['--bias'], dest='bias', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to add bias to linear layers.', metavar=None),
                            '--bond_features_path': _StoreAction(option_strings=['--bond_features_path'], dest='bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to the extra bond descriptors that will be used as bond features to featurize a given molecule.', metavar=None),
                            '--cache_cutoff': _StoreAction(option_strings=['--cache_cutoff'], dest='cache_cutoff', nargs=None, const=None, default=10000, type=<class 'float'>, choices=None, help='(float, default=10000) Maximum number of molecules in dataset to allow caching.\n    Below this number, caching is used and data loading is sequential.\n    Above this number, caching is not used and data loading is parallel.\n    Use "inf" to always cache.', metavar=None),
                            '--checkpoint_dir': _StoreAction(option_strings=['--checkpoint_dir'], dest='checkpoint_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory from which to load model checkpoints (walks directory and ensembles all models that are found).', metavar=None),
                            '--checkpoint_frzn': _StoreAction(option_strings=['--checkpoint_frzn'], dest='checkpoint_frzn', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint file to be loaded for overwriting and freezing weights.', metavar=None),
                            '--checkpoint_path': _StoreAction(option_strings=['--checkpoint_path'], dest='checkpoint_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to model checkpoint (:code:`.pt` file).', metavar=None),
                            '--checkpoint_paths': _StoreAction(option_strings=['--checkpoint_paths'], dest='checkpoint_paths', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of paths to model checkpoints (:code:`.pt` files).', metavar=None),
                            '--class_balance': _StoreTrueAction(option_strings=['--class_balance'], dest='class_balance', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Trains with an equal number of positives and negatives in each batch.', metavar=None),
                            '--class_weight': _StoreAction(option_strings=['--class_weight'], dest='class_weight', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb040>, choices=['balanced'], help="(Literal['balanced'], default=None) How to weight classes (None means no class balance).", metavar=None),
                            '--config_path': _StoreAction(option_strings=['--config_path'], dest='config_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to a :code:`.json` file containing arguments. Any arguments present in the config file\n    will override arguments specified via the command line or by the defaults.', metavar=None),
                            '--crossval_index_dir': _StoreAction(option_strings=['--crossval_index_dir'], dest='crossval_index_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory in which to find cross validation index files.', metavar=None),
                            '--crossval_index_file': _StoreAction(option_strings=['--crossval_index_file'], dest='crossval_index_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Indices of files to use as train/val/test. Overrides :code:`--num_folds` and :code:`--seed`.', metavar=None),
                            '--data_path': _StoreAction(option_strings=['--data_path'], dest='data_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, required) Path to data CSV file.', metavar=None),
                            '--data_weights_path': _StoreAction(option_strings=['--data_weights_path'], dest='data_weights_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to weights for each molecule in the training data, affecting the relative weight of molecules in the loss function', metavar=None),
                            '--dataset_type': _StoreAction(option_strings=['--dataset_type'], dest='dataset_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb0d0>, choices=['regression', 'classification', 'multiclass'], help="(Literal['regression', 'classification', 'multiclass'], required) Type of dataset. This determines the loss function used during training.", metavar=None),
                            '--depth': _StoreAction(option_strings=['--depth'], dest='depth', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of message passing steps.', metavar=None),
                            '--dropout': _StoreAction(option_strings=['--dropout'], dest='dropout', nargs=None, const=None, default=0.0, type=<class 'float'>, choices=None, help='(float, default=0.0) Dropout probability.', metavar=None),
                            '--empty_cache': _StoreTrueAction(option_strings=['--empty_cache'], dest='empty_cache', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to empty all caches before training or predicting. This is necessary if multiple jobs are run within a single script and the atom or bond features change.', metavar=None),
                            '--ensemble_size': _StoreAction(option_strings=['--ensemble_size'], dest='ensemble_size', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of models in ensemble.', metavar=None),
                            '--epochs': _StoreAction(option_strings=['--epochs'], dest='epochs', nargs=None, const=None, default=30, type=<class 'int'>, choices=None, help='(int, default=30) Number of epochs to run.', metavar=None),
                            '--explicit_h': _StoreTrueAction(option_strings=['--explicit_h'], dest='explicit_h', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether H are explicitly specified in input (and should be kept this way).', metavar=None),
                            '--extra_metrics': _StoreAction(option_strings=['--extra_metrics'], dest='extra_metrics', nargs='*', const=None, default=[], type=<function get_literals.<locals>.var_type at 0x7fc2116bb280>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help="(List[Literal['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy']], default=[]) Additional metrics to use to evaluate the model. Not used for early stopping.", metavar=None),
                            '--features_generator': _StoreAction(option_strings=['--features_generator'], dest='features_generator', nargs='*', const=None, default=None, type=<class 'str'>, choices=['morgan', 'morgan_count', 'rdkit_2d', 'rdkit_2d_normalized'], help='(List[str], default=None) Method(s) of generating additional features.', metavar=None),
                            '--features_only': _StoreTrueAction(option_strings=['--features_only'], dest='features_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Use only the additional features in an FFN, no graph network.', metavar=None),
                            '--features_path': _StoreAction(option_strings=['--features_path'], dest='features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path(s) to features to use in FNN (instead of features_generator).', metavar=None),
                            '--ffn_hidden_size': _StoreAction(option_strings=['--ffn_hidden_size'], dest='ffn_hidden_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Hidden dim for higher-capacity FFN (defaults to hidden_size).', metavar=None),
                            '--ffn_num_layers': _StoreAction(option_strings=['--ffn_num_layers'], dest='ffn_num_layers', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Number of layers in FFN after MPN encoding.', metavar=None),
                            '--final_lr': _StoreAction(option_strings=['--final_lr'], dest='final_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Final learning rate.', metavar=None),
                            '--folds_file': _StoreAction(option_strings=['--folds_file'], dest='folds_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Optional file of fold labels.', metavar=None),
                            '--freeze_first_only': _StoreTrueAction(option_strings=['--freeze_first_only'], dest='freeze_first_only', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Determines whether or not to use checkpoint_frzn for just the first encoder.\n    Default (False) is to use the checkpoint to freeze all encoders.\n    (only relevant for number_of_molecules > 1, where checkpoint model has number_of_molecules = 1)', metavar=None),
                            '--frzn_ffn_layers': _StoreAction(option_strings=['--frzn_ffn_layers'], dest='frzn_ffn_layers', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Overwrites weights for the first n layers of the ffn from checkpoint model (specified checkpoint_frzn), \n    where n is specified in the input.\n    Automatically also freezes mpnn weights.', metavar=None),
                            '--gpu': _StoreAction(option_strings=['--gpu'], dest='gpu', nargs=None, const=None, default=None, type=<class 'int'>, choices=[], help='(int, default=None) Which GPU to use.', metavar=None),
                            '--grad_clip': _StoreAction(option_strings=['--grad_clip'], dest='grad_clip', nargs=None, const=None, default=None, type=<class 'float'>, choices=None, help='(float, default=None) Maximum magnitude of gradient during training.', metavar=None),
                            '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
                            '--hidden_size': _StoreAction(option_strings=['--hidden_size'], dest='hidden_size', nargs=None, const=None, default=300, type=<class 'int'>, choices=None, help='(int, default=300) Dimensionality of hidden layers in MPN.', metavar=None),
                            '--ignore_columns': _StoreAction(option_strings=['--ignore_columns'], dest='ignore_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns to ignore when :code:`target_columns` is not provided.', metavar=None),
                            '--init_lr': _StoreAction(option_strings=['--init_lr'], dest='init_lr', nargs=None, const=None, default=0.0001, type=<class 'float'>, choices=None, help='(float, default=0.0001) Initial learning rate.', metavar=None),
                            '--log_frequency': _StoreAction(option_strings=['--log_frequency'], dest='log_frequency', nargs=None, const=None, default=10, type=<class 'int'>, choices=None, help='(int, default=10) The number of batches between each logging of the training loss.', metavar=None),
                            '--max_data_size': _StoreAction(option_strings=['--max_data_size'], dest='max_data_size', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Maximum number of data points to load.', metavar=None),
                            '--max_lr': _StoreAction(option_strings=['--max_lr'], dest='max_lr', nargs=None, const=None, default=0.001, type=<class 'float'>, choices=None, help='(float, default=0.001) Maximum learning rate.', metavar=None),
                            '--metric': _StoreAction(option_strings=['--metric'], dest='metric', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc2116bb1f0>, choices=['auc', 'prc-auc', 'rmse', 'mae', 'mse', 'r2', 'accuracy', 'cross_entropy', 'binary_cross_entropy'], help='(Literal[\'auc\', \'prc-auc\', \'rmse\', \'mae\', \'mse\', \'r2\', \'accuracy\', \'cross_entropy\', \'binary_cross_entropy\'], default=None) Metric to use during evaluation. It is also used with the validation set for early stopping.\n    Defaults to "auc" for classification and "rmse" for regression.', metavar=None),
                            '--model_type': _StoreAction(option_strings=['--model_type'], dest='model_type', nargs=None, const=None, default=None, type=<function get_literals.<locals>.var_type at 0x7fc211717ee0>, choices=['random_forest', 'svm'], help="(Literal['random_forest', 'svm'], required) scikit-learn model to use.", metavar=None),
                            '--mpn_shared': _StoreTrueAction(option_strings=['--mpn_shared'], dest='mpn_shared', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to use the same message passing neural network for all input molecules\n    Only relevant if :code:`number_of_molecules > 1`', metavar=None),
                            '--multiclass_num_classes': _StoreAction(option_strings=['--multiclass_num_classes'], dest='multiclass_num_classes', nargs=None, const=None, default=3, type=<class 'int'>, choices=None, help='(int, default=3) Number of classes when running multiclass classification.', metavar=None),
                            '--no_atom_descriptor_scaling': _StoreTrueAction(option_strings=['--no_atom_descriptor_scaling'], dest='no_atom_descriptor_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_bond_features_scaling': _StoreTrueAction(option_strings=['--no_bond_features_scaling'], dest='no_bond_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off atom feature scaling.', metavar=None),
                            '--no_cache_mol': _StoreTrueAction(option_strings=['--no_cache_mol'], dest='no_cache_mol', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to not cache the RDKit molecule for each SMILES string to reduce memory usage (cached by default).', metavar=None),
                            '--no_cuda': _StoreTrueAction(option_strings=['--no_cuda'], dest='no_cuda', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off cuda (i.e., use CPU instead of GPU).', metavar=None),
                            '--no_features_scaling': _StoreTrueAction(option_strings=['--no_features_scaling'], dest='no_features_scaling', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Turn off scaling of features.', metavar=None),
                            '--num_bits': _StoreAction(option_strings=['--num_bits'], dest='num_bits', nargs=None, const=None, default=2048, type=<class 'int'>, choices=None, help='(int, default=2048) Number of bits in morgan fingerprint.', metavar=None),
                            '--num_folds': _StoreAction(option_strings=['--num_folds'], dest='num_folds', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of folds when performing cross validation.', metavar=None),
                            '--num_trees': _StoreAction(option_strings=['--num_trees'], dest='num_trees', nargs=None, const=None, default=500, type=<class 'int'>, choices=None, help='(int, default=500) Number of random forest trees.', metavar=None),
                            '--num_workers': _StoreAction(option_strings=['--num_workers'], dest='num_workers', nargs=None, const=None, default=8, type=<class 'int'>, choices=None, help='(int, default=8) Number of workers for the parallel data loading (0 means sequential).', metavar=None),
                            '--number_of_molecules': _StoreAction(option_strings=['--number_of_molecules'], dest='number_of_molecules', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, help='(int, default=1) Number of molecules in each input to the model.\n    This must equal the length of :code:`smiles_columns` (if not :code:`None`).', metavar=None),
                            '--overwrite_default_atom_features': _StoreTrueAction(option_strings=['--overwrite_default_atom_features'], dest='overwrite_default_atom_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them.\n    Can only be used if atom_descriptors are used as a feature.', metavar=None),
                            '--overwrite_default_bond_features': _StoreTrueAction(option_strings=['--overwrite_default_bond_features'], dest='overwrite_default_bond_features', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Overwrites the default atom descriptors with the new ones instead of concatenating them', metavar=None),
                            '--pytorch_seed': _StoreAction(option_strings=['--pytorch_seed'], dest='pytorch_seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Seed for PyTorch randomness (e.g., random initial weights).', metavar=None),
                            '--quiet': _StoreTrueAction(option_strings=['--quiet'], dest='quiet', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Skip non-essential print statements.', metavar=None),
                            '--radius': _StoreAction(option_strings=['--radius'], dest='radius', nargs=None, const=None, default=2, type=<class 'int'>, choices=None, help='(int, default=2) Morgan fingerprint radius.', metavar=None),
                            '--reaction': _StoreTrueAction(option_strings=['--reaction'], dest='reaction', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to adjust MPNN layer to take reactions as input instead of molecules.', metavar=None),
                            '--reaction_mode': _StoreAction(option_strings=['--reaction_mode'], dest='reaction_mode', nargs=None, const=None, default='reac_diff', type=<function get_literals.<locals>.var_type at 0x7fc2116bb9d0>, choices=['reac_prod', 'reac_diff', 'prod_diff'], help="(Literal['reac_prod', 'reac_diff', 'prod_diff'], default=reac_diff) Choices for construction of atom and bond features for reactions\n    :code:`reac_prod`: concatenates the reactants feature with the products feature.\n    :code:`reac_diff`: concatenates the reactants feature with the difference in features between reactants and products. \n    :code:`prod_diff`: concatenates the products feature with the difference in features between reactants and products.", metavar=None),
                            '--resume_experiment': _StoreTrueAction(option_strings=['--resume_experiment'], dest='resume_experiment', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to resume the experiment.\n    Loads test results from any folds that have already been completed and skips training those folds.', metavar=None),
                            '--save_dir': _StoreAction(option_strings=['--save_dir'], dest='save_dir', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Directory where model checkpoints will be saved.', metavar=None),
                            '--save_preds': _StoreTrueAction(option_strings=['--save_preds'], dest='save_preds', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to save test split predictions during training.', metavar=None),
                            '--save_smiles_splits': _StoreTrueAction(option_strings=['--save_smiles_splits'], dest='save_smiles_splits', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Save smiles for each train/val/test splits for prediction convenience later.', metavar=None),
                            '--seed': _StoreAction(option_strings=['--seed'], dest='seed', nargs=None, const=None, default=0, type=<class 'int'>, choices=None, help='(int, default=0) Random seed to use when splitting data into train/val/test sets.\n    When :code`num_folds > 1`, the first fold uses this seed and all subsequent folds add 1 to the seed.', metavar=None),
                            '--separate_test_atom_descriptors_path': _StoreAction(option_strings=['--separate_test_atom_descriptors_path'], dest='separate_test_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_bond_features_path': _StoreAction(option_strings=['--separate_test_bond_features_path'], dest='separate_test_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate test set.', metavar=None),
                            '--separate_test_features_path': _StoreAction(option_strings=['--separate_test_features_path'], dest='separate_test_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate test set.', metavar=None),
                            '--separate_test_path': _StoreAction(option_strings=['--separate_test_path'], dest='separate_test_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate test set, optional.', metavar=None),
                            '--separate_val_atom_descriptors_path': _StoreAction(option_strings=['--separate_val_atom_descriptors_path'], dest='separate_val_atom_descriptors_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_bond_features_path': _StoreAction(option_strings=['--separate_val_bond_features_path'], dest='separate_val_bond_features_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to file with extra atom descriptors for separate val set.', metavar=None),
                            '--separate_val_features_path': _StoreAction(option_strings=['--separate_val_features_path'], dest='separate_val_features_path', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Path to file with features for separate val set.', metavar=None),
                            '--separate_val_path': _StoreAction(option_strings=['--separate_val_path'], dest='separate_val_path', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, help='(str, default=None) Path to separate val set, optional.', metavar=None),
                            '--show_individual_scores': _StoreTrueAction(option_strings=['--show_individual_scores'], dest='show_individual_scores', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Show all scores for individual targets, not just average, at the end.', metavar=None),
                            '--single_task': _StoreTrueAction(option_strings=['--single_task'], dest='single_task', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to run each task separately (needed when dataset has null entries).', metavar=None),
                            '--smiles_columns': _StoreAction(option_strings=['--smiles_columns'], dest='smiles_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) List of names of the columns containing SMILES strings.\n    By default, uses the first :code:`number_of_molecules` columns.', metavar=None),
                            '--split_sizes': _StoreAction(option_strings=['--split_sizes'], dest='split_sizes', nargs=3, const=None, default=(0.8, 0.1, 0.1), type=<tap.utils.TupleTypeEnforcer object at 0x7fc2116c2580>, choices=None, help='(Tuple[float, float, float], default=(0.8, 0.1, 0.1)) Split proportions for train/validation/test sets.', metavar=None),
                            '--split_type': _StoreAction(option_strings=['--split_type'], dest='split_type', nargs=None, const=None, default='random', type=<function get_literals.<locals>.var_type at 0x7fc2116bb160>, choices=['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], help="(Literal['random', 'scaffold_balanced', 'predetermined', 'crossval', 'cv', 'cv-no-test', 'index_predetermined'], default=random) Method of splitting the data into train/val/test.", metavar=None),
                            '--target_columns': _StoreAction(option_strings=['--target_columns'], dest='target_columns', nargs='*', const=None, default=None, type=<class 'str'>, choices=None, help='(List[str], default=None) Name of the columns containing target values.\n    By default, uses all columns except the SMILES column and the :code:`ignore_columns`.', metavar=None),
                            '--target_weights': _StoreAction(option_strings=['--target_weights'], dest='target_weights', nargs='*', const=None, default=None, type=<class 'float'>, choices=None, help='(List[float], default=None) Weights associated with each target, affecting the relative weight of targets in the loss function. Must match the number of target columns.', metavar=None),
                            '--test': _StoreTrueAction(option_strings=['--test'], dest='test', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Whether to skip training and only test the model.', metavar=None),
                            '--test_fold_index': _StoreAction(option_strings=['--test_fold_index'], dest='test_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as test for leave-one-out cross val.', metavar=None),
                            '--undirected': _StoreTrueAction(option_strings=['--undirected'], dest='undirected', nargs=0, const=True, default=False, type=None, choices=None, help='(bool, default=False) Undirected edges (always sum the two relevant bond vectors).', metavar=None),
                            '--val_fold_index': _StoreAction(option_strings=['--val_fold_index'], dest='val_fold_index', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, help='(int, default=None) Which fold to use as val for leave-one-out cross val.', metavar=None),
                            '--warmup_epochs': _StoreAction(option_strings=['--warmup_epochs'], dest='warmup_epochs', nargs=None, const=None, default=2.0, type=<class 'float'>, choices=None, help='(float, default=2.0) Number of epochs during which learning rate increases linearly from :code:`init_lr` to :code:`max_lr`.\n    Afterwards, learning rate decreases exponentially from :code:`max_lr` to :code:`final_lr`.', metavar=None),
                            '-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None)},
 '_optionals': <argparse._ArgumentGroup object at 0x7fc3ab0afaf0>,
 '_parsed': True,
 '_positionals': <argparse._ArgumentGroup object at 0x7fc3aafb9340>,
 '_registries': {'action': {None: <class 'argparse._StoreAction'>,
                            'append': <class 'argparse._AppendAction'>,
                            'append_const': <class 'argparse._AppendConstAction'>,
                            'count': <class 'argparse._CountAction'>,
                            'extend': <class 'argparse._ExtendAction'>,
                            'help': <class 'argparse._HelpAction'>,
                            'parsers': <class 'argparse._SubParsersAction'>,
                            'store': <class 'argparse._StoreAction'>,
                            'store_const': <class 'argparse._StoreConstAction'>,
                            'store_false': <class 'argparse._StoreFalseAction'>,
                            'store_true': <class 'argparse._StoreTrueAction'>,
                            'version': <class 'argparse._VersionAction'>},
                 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7fc3ab10e1f0>}},
 '_subparser_buffer': [],
 '_subparsers': None,
 '_task_names': ['hit'],
 '_train_data_size': None,
 '_underscores_to_dashes': False,
 'activation': 'ReLU',
 'add_help': True,
 'aggregation': 'mean',
 'aggregation_norm': 100,
 'allow_abbrev': True,
 'args_from_configs': [],
 'argument_buffer': OrderedDict([('help',
                                  (('-h', '--help'),
                                   {'action': 'help',
                                    'default': '==SUPPRESS==',
                                    'help': 'show this help message and '
                                            'exit'})),
                                 ('gpu', (('--gpu',), {'choices': []})),
                                 ('features_generator',
                                  (('--features_generator',),
                                   {'choices': ['morgan',
                                                'morgan_count',
                                                'rdkit_2d',
                                                'rdkit_2d_normalized']}))]),
 'argument_default': None,
 'atom_descriptors': None,
 'atom_descriptors_path': None,
 'atom_messages': False,
 'batch_size': 50,
 'bias': False,
 'bond_features_path': None,
 'cache_cutoff': 10000,
 'checkpoint_dir': None,
 'checkpoint_frzn': None,
 'checkpoint_path': None,
 'checkpoint_paths': None,
 'class_balance': False,
 'class_variables': OrderedDict([('model_type',
                                  {'comment': 'scikit-learn model to use.'}),
                                 ('class_weight',
                                  {'comment': 'How to weight classes (None '
                                              'means no class balance).'}),
                                 ('single_task',
                                  {'comment': 'Whether to run each task '
                                              'separately (needed when dataset '
                                              'has null entries).'}),
                                 ('radius',
                                  {'comment': 'Morgan fingerprint radius.'}),
                                 ('num_bits',
                                  {'comment': 'Number of bits in morgan '
                                              'fingerprint.'}),
                                 ('num_trees',
                                  {'comment': 'Number of random forest '
                                              'trees.'}),
                                 ('data_path',
                                  {'comment': 'Path to data CSV file.'}),
                                 ('target_columns',
                                  {'comment': 'Name of the columns containing '
                                              'target values.\n'
                                              '    By default, uses all '
                                              'columns except the SMILES '
                                              'column and the '
                                              ':code:`ignore_columns`.'}),
                                 ('ignore_columns',
                                  {'comment': 'Name of the columns to ignore '
                                              'when :code:`target_columns` is '
                                              'not provided.'}),
                                 ('dataset_type',
                                  {'comment': 'Type of dataset. This '
                                              'determines the loss function '
                                              'used during training.'}),
                                 ('multiclass_num_classes',
                                  {'comment': 'Number of classes when running '
                                              'multiclass classification.'}),
                                 ('separate_val_path',
                                  {'comment': 'Path to separate val set, '
                                              'optional.'}),
                                 ('separate_test_path',
                                  {'comment': 'Path to separate test set, '
                                              'optional.'}),
                                 ('data_weights_path',
                                  {'comment': 'Path to weights for each '
                                              'molecule in the training data, '
                                              'affecting the relative weight '
                                              'of molecules in the loss '
                                              'function'}),
                                 ('target_weights',
                                  {'comment': 'Weights associated with each '
                                              'target, affecting the relative '
                                              'weight of targets in the loss '
                                              'function. Must match the number '
                                              'of target columns.'}),
                                 ('split_type',
                                  {'comment': 'Method of splitting the data '
                                              'into train/val/test.'}),
                                 ('split_sizes',
                                  {'comment': 'Split proportions for '
                                              'train/validation/test sets.'}),
                                 ('num_folds',
                                  {'comment': 'Number of folds when performing '
                                              'cross validation.'}),
                                 ('folds_file',
                                  {'comment': 'Optional file of fold labels.'}),
                                 ('val_fold_index',
                                  {'comment': 'Which fold to use as val for '
                                              'leave-one-out cross val.'}),
                                 ('test_fold_index',
                                  {'comment': 'Which fold to use as test for '
                                              'leave-one-out cross val.'}),
                                 ('crossval_index_dir',
                                  {'comment': 'Directory in which to find '
                                              'cross validation index files.'}),
                                 ('crossval_index_file',
                                  {'comment': 'Indices of files to use as '
                                              'train/val/test. Overrides '
                                              ':code:`--num_folds` and '
                                              ':code:`--seed`.'}),
                                 ('seed',
                                  {'comment': 'Random seed to use when '
                                              'splitting data into '
                                              'train/val/test sets.\n'
                                              '    When :code`num_folds > 1`, '
                                              'the first fold uses this seed '
                                              'and all subsequent folds add 1 '
                                              'to the seed.'}),
                                 ('pytorch_seed',
                                  {'comment': 'Seed for PyTorch randomness '
                                              '(e.g., random initial '
                                              'weights).'}),
                                 ('metric',
                                  {'comment': 'Metric to use during '
                                              'evaluation. It is also used '
                                              'with the validation set for '
                                              'early stopping.\n'
                                              '    Defaults to "auc" for '
                                              'classification and "rmse" for '
                                              'regression.'}),
                                 ('extra_metrics',
                                  {'comment': 'Additional metrics to use to '
                                              'evaluate the model. Not used '
                                              'for early stopping.'}),
                                 ('save_dir',
                                  {'comment': 'Directory where model '
                                              'checkpoints will be saved.'}),
                                 ('checkpoint_frzn',
                                  {'comment': 'Path to model checkpoint file '
                                              'to be loaded for overwriting '
                                              'and freezing weights.'}),
                                 ('save_smiles_splits',
                                  {'comment': 'Save smiles for each '
                                              'train/val/test splits for '
                                              'prediction convenience later.'}),
                                 ('test',
                                  {'comment': 'Whether to skip training and '
                                              'only test the model.'}),
                                 ('quiet',
                                  {'comment': 'Skip non-essential print '
                                              'statements.'}),
                                 ('log_frequency',
                                  {'comment': 'The number of batches between '
                                              'each logging of the training '
                                              'loss.'}),
                                 ('show_individual_scores',
                                  {'comment': 'Show all scores for individual '
                                              'targets, not just average, at '
                                              'the end.'}),
                                 ('cache_cutoff',
                                  {'comment': 'Maximum number of molecules in '
                                              'dataset to allow caching.\n'
                                              '    Below this number, caching '
                                              'is used and data loading is '
                                              'sequential.\n'
                                              '    Above this number, caching '
                                              'is not used and data loading is '
                                              'parallel.\n'
                                              '    Use "inf" to always '
                                              'cache.'}),
                                 ('save_preds',
                                  {'comment': 'Whether to save test split '
                                              'predictions during training.'}),
                                 ('resume_experiment',
                                  {'comment': 'Whether to resume the '
                                              'experiment.\n'
                                              '    Loads test results from any '
                                              'folds that have already been '
                                              'completed and skips training '
                                              'those folds.'}),
                                 ('bias',
                                  {'comment': 'Whether to add bias to linear '
                                              'layers.'}),
                                 ('hidden_size',
                                  {'comment': 'Dimensionality of hidden layers '
                                              'in MPN.'}),
                                 ('depth',
                                  {'comment': 'Number of message passing '
                                              'steps.'}),
                                 ('mpn_shared',
                                  {'comment': 'Whether to use the same message '
                                              'passing neural network for all '
                                              'input molecules\n'
                                              '    Only relevant if '
                                              ':code:`number_of_molecules > '
                                              '1`'}),
                                 ('dropout',
                                  {'comment': 'Dropout probability.'}),
                                 ('activation',
                                  {'comment': 'Activation function.'}),
                                 ('atom_messages',
                                  {'comment': 'Centers messages on atoms '
                                              'instead of on bonds.'}),
                                 ('undirected',
                                  {'comment': 'Undirected edges (always sum '
                                              'the two relevant bond '
                                              'vectors).'}),
                                 ('ffn_hidden_size',
                                  {'comment': 'Hidden dim for higher-capacity '
                                              'FFN (defaults to '
                                              'hidden_size).'}),
                                 ('ffn_num_layers',
                                  {'comment': 'Number of layers in FFN after '
                                              'MPN encoding.'}),
                                 ('features_only',
                                  {'comment': 'Use only the additional '
                                              'features in an FFN, no graph '
                                              'network.'}),
                                 ('separate_val_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate val set.'}),
                                 ('separate_test_features_path',
                                  {'comment': 'Path to file with features for '
                                              'separate test set.'}),
                                 ('separate_val_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_atom_descriptors_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('separate_val_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate val '
                                              'set.'}),
                                 ('separate_test_bond_features_path',
                                  {'comment': 'Path to file with extra atom '
                                              'descriptors for separate test '
                                              'set.'}),
                                 ('config_path',
                                  {'comment': 'Path to a :code:`.json` file '
                                              'containing arguments. Any '
                                              'arguments present in the config '
                                              'file\n'
                                              '    will override arguments '
                                              'specified via the command line '
                                              'or by the defaults.'}),
                                 ('ensemble_size',
                                  {'comment': 'Number of models in ensemble.'}),
                                 ('aggregation',
                                  {'comment': 'Aggregation scheme for atomic '
                                              'vectors into molecular '
                                              'vectors'}),
                                 ('aggregation_norm',
                                  {'comment': 'For norm aggregation, number by '
                                              'which to divide summed up '
                                              'atomic features'}),
                                 ('reaction',
                                  {'comment': 'Whether to adjust MPNN layer to '
                                              'take reactions as input instead '
                                              'of molecules.'}),
                                 ('reaction_mode',
                                  {'comment': 'Choices for construction of '
                                              'atom and bond features for '
                                              'reactions\n'
                                              '    :code:`reac_prod`: '
                                              'concatenates the reactants '
                                              'feature with the products '
                                              'feature.\n'
                                              '    :code:`reac_diff`: '
                                              'concatenates the reactants '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products. \n'
                                              '    :code:`prod_diff`: '
                                              'concatenates the products '
                                              'feature with the difference in '
                                              'features between reactants and '
                                              'products.'}),
                                 ('explicit_h',
                                  {'comment': 'Whether H are explicitly '
                                              'specified in input (and should '
                                              'be kept this way).'}),
                                 ('epochs',
                                  {'comment': 'Number of epochs to run.'}),
                                 ('warmup_epochs',
                                  {'comment': 'Number of epochs during which '
                                              'learning rate increases '
                                              'linearly from :code:`init_lr` '
                                              'to :code:`max_lr`.\n'
                                              '    Afterwards, learning rate '
                                              'decreases exponentially from '
                                              ':code:`max_lr` to '
                                              ':code:`final_lr`.'}),
                                 ('init_lr',
                                  {'comment': 'Initial learning rate.'}),
                                 ('max_lr',
                                  {'comment': 'Maximum learning rate.'}),
                                 ('final_lr',
                                  {'comment': 'Final learning rate.'}),
                                 ('grad_clip',
                                  {'comment': 'Maximum magnitude of gradient '
                                              'during training.'}),
                                 ('class_balance',
                                  {'comment': 'Trains with an equal number of '
                                              'positives and negatives in each '
                                              'batch.'}),
                                 ('overwrite_default_atom_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them.\n'
                                              '    Can only be used if '
                                              'atom_descriptors are used as a '
                                              'feature.'}),
                                 ('no_atom_descriptor_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('overwrite_default_bond_features',
                                  {'comment': 'Overwrites the default atom '
                                              'descriptors with the new ones '
                                              'instead of concatenating them'}),
                                 ('no_bond_features_scaling',
                                  {'comment': 'Turn off atom feature '
                                              'scaling.'}),
                                 ('frzn_ffn_layers',
                                  {'comment': 'Overwrites weights for the '
                                              'first n layers of the ffn from '
                                              'checkpoint model (specified '
                                              'checkpoint_frzn), \n'
                                              '    where n is specified in the '
                                              'input.\n'
                                              '    Automatically also freezes '
                                              'mpnn weights.'}),
                                 ('freeze_first_only',
                                  {'comment': 'Determines whether or not to '
                                              'use checkpoint_frzn for just '
                                              'the first encoder.\n'
                                              '    Default (False) is to use '
                                              'the checkpoint to freeze all '
                                              'encoders.\n'
                                              '    (only relevant for '
                                              'number_of_molecules > 1, where '
                                              'checkpoint model has '
                                              'number_of_molecules = 1)'}),
                                 ('smiles_columns',
                                  {'comment': 'List of names of the columns '
                                              'containing SMILES strings.\n'
                                              '    By default, uses the first '
                                              ':code:`number_of_molecules` '
                                              'columns.'}),
                                 ('number_of_molecules',
                                  {'comment': 'Number of molecules in each '
                                              'input to the model.\n'
                                              '    This must equal the length '
                                              'of :code:`smiles_columns` (if '
                                              'not :code:`None`).'}),
                                 ('checkpoint_dir',
                                  {'comment': 'Directory from which to load '
                                              'model checkpoints (walks '
                                              'directory and ensembles all '
                                              'models that are found).'}),
                                 ('checkpoint_path',
                                  {'comment': 'Path to model checkpoint '
                                              '(:code:`.pt` file).'}),
                                 ('checkpoint_paths',
                                  {'comment': 'List of paths to model '
                                              'checkpoints (:code:`.pt` '
                                              'files).'}),
                                 ('no_cuda',
                                  {'comment': 'Turn off cuda (i.e., use CPU '
                                              'instead of GPU).'}),
                                 ('gpu', {'comment': 'Which GPU to use.'}),
                                 ('features_generator',
                                  {'comment': 'Method(s) of generating '
                                              'additional features.'}),
                                 ('features_path',
                                  {'comment': 'Path(s) to features to use in '
                                              'FNN (instead of '
                                              'features_generator).'}),
                                 ('no_features_scaling',
                                  {'comment': 'Turn off scaling of features.'}),
                                 ('max_data_size',
                                  {'comment': 'Maximum number of data points '
                                              'to load.'}),
                                 ('num_workers',
                                  {'comment': 'Number of workers for the '
                                              'parallel data loading (0 means '
                                              'sequential).'}),
                                 ('batch_size', {'comment': 'Batch size.'}),
                                 ('atom_descriptors',
                                  {'comment': 'Custom extra atom descriptors.\n'
                                              '    :code:`feature`: used as '
                                              'atom features to featurize a '
                                              'given molecule.\n'
                                              '    :code:`descriptor`: used as '
                                              'descriptor and concatenated to '
                                              'the machine learned atomic '
                                              'representation.'}),
                                 ('atom_descriptors_path',
                                  {'comment': 'Path to the extra atom '
                                              'descriptors.'}),
                                 ('bond_features_path',
                                  {'comment': 'Path to the extra bond '
                                              'descriptors that will be used '
                                              'as bond features to featurize a '
                                              'given molecule.'}),
                                 ('no_cache_mol',
                                  {'comment': 'Whether to not cache the RDKit '
                                              'molecule for each SMILES string '
                                              'to reduce memory usage (cached '
                                              'by default).'}),
                                 ('empty_cache',
                                  {'comment': 'Whether to empty all caches '
                                              'before training or predicting. '
                                              'This is necessary if multiple '
                                              'jobs are run within a single '
                                              'script and the atom or bond '
                                              'features change.'})]),
 'class_weight': 'balanced',
 'config_path': None,
 'conflict_handler': 'error',
 'crossval_index_dir': None,
 'crossval_index_file': None,
 'data_path': '../melis_gonorrhea/data/FULL_03_19_2022_for_sklearn.csv',
 'data_weights_path': None,
 'dataset_type': 'classification',
 'depth': 3,
 'description': None,
 'dropout': 0.0,
 'empty_cache': False,
 'ensemble_size': 1,
 'epilog': None,
 'epochs': 30,
 'explicit_h': False,
 'extra_args': [],
 'extra_metrics': ['auc'],
 'features_generator': None,
 'features_only': False,
 'features_path': ['../melis_gonorrhea/data/FULL_03_19_2022.npz'],
 'ffn_hidden_size': 300,
 'ffn_num_layers': 2,
 'final_lr': 0.0001,
 'folds_file': None,
 'formatter_class': <class 'argparse.HelpFormatter'>,
 'freeze_first_only': False,
 'fromfile_prefix_chars': None,
 'frzn_ffn_layers': 0,
 'gpu': None,
 'grad_clip': None,
 'hidden_size': 300,
 'ignore_columns': None,
 'init_lr': 0.0001,
 'log_frequency': 10,
 'max_data_size': None,
 'max_lr': 0.001,
 'metric': 'prc-auc',
 'model_type': 'svm',
 'mpn_shared': False,
 'multiclass_num_classes': 3,
 'no_atom_descriptor_scaling': False,
 'no_bond_features_scaling': False,
 'no_cache_mol': False,
 'no_cuda': False,
 'no_features_scaling': True,
 'num_bits': 4096,
 'num_folds': 30,
 'num_trees': 500,
 'num_workers': 8,
 'number_of_molecules': 1,
 'overwrite_default_atom_features': False,
 'overwrite_default_bond_features': False,
 'prefix_chars': '-',
 'prog': 'sklearn_train.py',
 'pytorch_seed': 0,
 'quiet': False,
 'radius': 2,
 'reaction': False,
 'reaction_mode': 'reac_diff',
 'resume_experiment': False,
 'save_dir': '../melis_gonorrhea/models/svm_final_15/fold_29',
 'save_preds': False,
 'save_smiles_splits': False,
 'seed': 29,
 'separate_test_atom_descriptors_path': None,
 'separate_test_bond_features_path': None,
 'separate_test_features_path': None,
 'separate_test_path': None,
 'separate_val_atom_descriptors_path': None,
 'separate_val_bond_features_path': None,
 'separate_val_features_path': None,
 'separate_val_path': None,
 'show_individual_scores': False,
 'single_task': False,
 'smiles_columns': ['SMILES'],
 'split_sizes': (0.8, 0.1, 0.1),
 'split_type': 'scaffold_balanced',
 'target_columns': ['hit'],
 'target_weights': None,
 'test': False,
 'test_fold_index': None,
 'undirected': False,
 'usage': None,
 'val_fold_index': None,
 'warmup_epochs': 2.0}
Loading data
Splitting data with seed 29
Total size = 38,680 | train size = 30,944 | test size = 3,868
Computing morgan fingerprints
Building model
SVC()
Training
Test prc-auc = 0.396072323026444
Test auc = 0.824460517308093
30-fold cross validation
	Seed 0 ==> test prc-auc = 0.376303
	Seed 0 ==> test auc = 0.735253
	Seed 1 ==> test prc-auc = 0.563174
	Seed 1 ==> test auc = 0.861859
	Seed 2 ==> test prc-auc = 0.488320
	Seed 2 ==> test auc = 0.888142
	Seed 3 ==> test prc-auc = 0.466944
	Seed 3 ==> test auc = 0.873222
	Seed 4 ==> test prc-auc = 0.424304
	Seed 4 ==> test auc = 0.835330
	Seed 5 ==> test prc-auc = 0.423326
	Seed 5 ==> test auc = 0.823940
	Seed 6 ==> test prc-auc = 0.347276
	Seed 6 ==> test auc = 0.779788
	Seed 7 ==> test prc-auc = 0.494402
	Seed 7 ==> test auc = 0.906722
	Seed 8 ==> test prc-auc = 0.369965
	Seed 8 ==> test auc = 0.887123
	Seed 9 ==> test prc-auc = 0.451584
	Seed 9 ==> test auc = 0.880101
	Seed 10 ==> test prc-auc = 0.431810
	Seed 10 ==> test auc = 0.864715
	Seed 11 ==> test prc-auc = 0.435595
	Seed 11 ==> test auc = 0.848014
	Seed 12 ==> test prc-auc = 0.372954
	Seed 12 ==> test auc = 0.871183
	Seed 13 ==> test prc-auc = 0.438928
	Seed 13 ==> test auc = 0.861755
	Seed 14 ==> test prc-auc = 0.248988
	Seed 14 ==> test auc = 0.827957
	Seed 15 ==> test prc-auc = 0.534692
	Seed 15 ==> test auc = 0.894323
	Seed 16 ==> test prc-auc = 0.474417
	Seed 16 ==> test auc = 0.842506
	Seed 17 ==> test prc-auc = 0.275594
	Seed 17 ==> test auc = 0.797555
	Seed 18 ==> test prc-auc = 0.268360
	Seed 18 ==> test auc = 0.792939
	Seed 19 ==> test prc-auc = 0.494875
	Seed 19 ==> test auc = 0.815180
	Seed 20 ==> test prc-auc = 0.489980
	Seed 20 ==> test auc = 0.900382
	Seed 21 ==> test prc-auc = 0.523208
	Seed 21 ==> test auc = 0.893434
	Seed 22 ==> test prc-auc = 0.292979
	Seed 22 ==> test auc = 0.810379
	Seed 23 ==> test prc-auc = 0.550711
	Seed 23 ==> test auc = 0.880640
	Seed 24 ==> test prc-auc = 0.445017
	Seed 24 ==> test auc = 0.840080
	Seed 25 ==> test prc-auc = 0.389452
	Seed 25 ==> test auc = 0.837285
	Seed 26 ==> test prc-auc = 0.429309
	Seed 26 ==> test auc = 0.820580
	Seed 27 ==> test prc-auc = 0.387745
	Seed 27 ==> test auc = 0.841393
	Seed 28 ==> test prc-auc = 0.398194
	Seed 28 ==> test auc = 0.826821
	Seed 29 ==> test prc-auc = 0.396072
	Seed 29 ==> test auc = 0.824461
Overall test prc-auc = 0.422816 +/- 0.080347
Overall test auc = 0.845435 +/- 0.039097
Elapsed time = 7:14:35
